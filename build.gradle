import org.gradle.api.tasks.compile.JavaCompile

plugins {
    id "maven-publish"
    id "xyz.wagyourtail.unimined" version "1.2.6-SNAPSHOT" apply false
}

//Print out JVM information so that we know what version is running. Extreamly useful for people to know when helping you.
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))


def isCI = System.getenv("GITHUB_ACTION")
def isRELEASE = System.getenv("GITHUB_RELEASE")
def gitHash() {
    String hash = System.getenv("GITHUB_SHA")
    if (hash != null) return hash.substring(0,8)
    return ""
}

subprojects {
    apply plugin: "xyz.wagyourtail.unimined"
    apply plugin: "maven-publish"
    java.toolchain.languageVersion = JavaLanguageVersion.of(17)

    group = rootProject.maven_group

    apply from: 'https://raw.githubusercontent.com/GregTech-Intergalactical/GradleSripts/main/repositories.gradle'

    java {
        withSourcesJar()
    }

    configurations {
        modCompileOnly
        compileOnly.extendsFrom modCompileOnly
        modRuntimeOnly
        runtimeOnly.extendsFrom modRuntimeOnly
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = 'UTF-8'
    }
    if (isCI) {
        if (!isRELEASE){
            version = version + "-" + gitHash()
            println("Not in CI Release mode")
        }
        println("In CI mode")
    }

    repositories {
        maven {
            url "https://mcentral.firstdark.dev/releases"
        }
    }

    jar {
        manifest {
            attributes([
                    'Specification-Title'     : project.archivesBaseName,
                    'Specification-Vendor'    : "Trinsdar",
                    'Specification-Version'   : project.version,
                    'Implementation-Title'    : project.name,
                    'Implementation-Version'  : project.version,
                    'Implementation-Vendor'   : "Trinsdar",
                    'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    'Timestamp'               : System.currentTimeMillis(),
                    'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                    'Built-On-Minecraft'      : minecraft_version
            ])
        }
    }

    unimined.minecraft(sourceSets.main, true) {
        version minecraft_version
        if (project.name != "common"){
            combineWith(project(":common"), project(":common").sourceSets.main)
        } else {
            if (project.name == "common") {
                mappings {
                    intermediary()
                }

                mods.modImplementation {
                    namespace("intermediary")
                }
            }
        }

        mods {
            remap(configurations.modCompileOnly){
                catchAWNamespaceAssertion()
            }
            remap(configurations.modRuntimeOnly){
                catchAWNamespaceAssertion()
            }
            modImplementation {
                catchAWNamespaceAssertion()
            }
        }

        mappings {
            mojmap()
            devFallbackNamespace "official"
            devNamespace "mojmap"
            parchment(rootProject.minecraft_version, rootProject.mappings_version)
        }
    }


    /*if (!project.path.contains("common")){

        configurations {
            common
            shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
            compileClasspath.extendsFrom common
            runtimeClasspath.extendsFrom common
            if (project.path.contains("forge")){
                developmentForge.extendsFrom common
            } else{
                developmentFabric.extendsFrom common
            }
        }

        shadowJar {
            configurations = [project.configurations.shadowCommon]
            archiveClassifier.set "dev-shadow"
        }

        remapJar {
            input.set shadowJar.archiveFile
            dependsOn shadowJar
            archiveClassifier.set null
        }

        jar {
            archiveClassifier.set "dev"
        }

        components.java {
            withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
                skip()
            }
        }
    }*/

    publishing {
        publications {
            mavenJava(org.gradle.api.publish.maven.MavenPublication) {
                artifactId = "gtcore-" + project.name
                from components.java
            }
        }
        repositories {
            if (isCI && isRELEASE) {
                maven {
                    url = "https://repo.repsy.io/mvn/trinsdar/gregtech-intergalactical/"
                    credentials {
                        username = System.getenv("MAVEN_USERNAME")
                        password = System.getenv("MAVEN_PASSWORD")
                    }
                }
            } else {
                mavenLocal()
            }
        }
    }
}



